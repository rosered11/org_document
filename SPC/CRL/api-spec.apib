FORMAT: 1A
HOST: http://crlservice

# CRL API

### Function Process Product Master

**Parameters**
- `fileId`

**Validation Criteria**
- [x] Check type of data, like:
    + [x] Check type and data is correct of datetime
    + [x] Check type digit for some field, if it is number.
    + [ ] [Optional] Check specific format of data, if it is specified, like: `email`
- [x] Check max length of data string, it isn't over length of field in database
- [x] Check duplicate data in the file and database</br>(**remark:** Try to minimum interact with a database).

**Process Instruction**
- Download file from Filemanagement by `fileId`
- Validate all data from `file`.
- Save data isn't invalid from `file` into `database`
- If has data invalid, Generate `report.csv` from the **all data + remark**.
- Compression file `report.csv` to `gzip`
- Send report `gzip` upload to `FileManagement Service`
- Update info and status of process file to `FileManagement Service`

### Status in ImportFileLog
| **Status** | **Description**
|------------|-----------------
| New | Initial status of log.
| In-progress | This task is processing for import data.
| Completed | This task import data is completed.
| In-completed | This task import data has a problem.
| Failed | Internal Exception for process import data.
| Unknown.. | Unknown status for sync to FC

### Type in BlobStorage
| **Type** | **Path** | **Description**
|----------|----------|----------------
| product-master | sprint-connect/product-master | This is path of the source file of product master.
| product-master-report | sprint-connect/product-master/report | This is path of the report file of product master.

## Group Product Api

### Trigger process product master [/product/master/fileprocess]

#### Trigger product master [PUT]

**Validation Criteria**
- [x] Check `fileId` isn't empty.

**Process Instruction**
- Create background thread for execute [Function Process File](#header-function-process-product-master)

+ Request (application/json)

    + Headers

        Authorization: Bearer {access-token}
    
    + Body

        {
            "fileId": "w143kxnu.idj"
        }

+ Response 201

+ Response 500 (application/json)
    + Attributes (InternalError Base)

## Group FileManagement Api
This section group filemanagement service

### Download [/filemanagement/blobStorage/{fileId}?fileName={fileName}]

#### Download file from blob [GET]
Use this endpoint for download file from blob storage.

**Containers**

Read container from config. 

**Type Available:** [click](#header-type-in-blobstorage)

**Process Instruction**
- Download `file` from blob storage follow Uri parameters `directory` and `fileId`

+ Parameters    
    + fileId (string)

        This `id` is a identity of file. ex: `w143kxnu.idj`
    
    + fileName (optional, string)

        This `fileName` is a name of file. ex: `fileName.csv.gz`

+ Response 200 (application/octet-stream)

    + Headers

        Content-Disposition: attachment; filename="file.csv.gz"

    + Body

        Binary Stream

+ Response 404 (application/json)
    + Attributes (NotFound Base)

+ Response 500 (application/json)
    + Attributes (InternalError Base)

### Download [/filemanagement/api/blobStorage/{fileId}/decompress?fileName={fileName}]

#### Download file by fileId with decompress [GET]

**Process Instruction**
- Download `file` from blob storage follow Uri parameters `directory` and `fileId`

+ Parameters    
    + fileId (string)

        This `fileId` is a identity of file. ex: `w143kxnu.idj`
    
    + fileName (optional, string)

        This `fileName` is a name of file. ex: `fileName.csv.gz`

+ Response 200 (application/octet-stream)

    + Headers

        Content-Disposition: attachment; filename="file.csv.gz"

    + Body

        Binary Stream

+ Response 404 (application/json)
    + Attributes (NotFound Base)

+ Response 500 (application/json)
    + Attributes (InternalError Base)

### Import file for processing [/filemanagement/api/blobStorage/bu/{bu}/type/{type}]

#### Import file for process [POST]
Use this endpoint to upload file into blob storage.

**Type Available:** [click](#header-type-in-blobstorage)

**Validation Criteria**
- [x] Check type available (Can be configuration)
- [x] Check content type, it is `application/octet-stream` only

**Process Instruction**
- Validate `fileStream`
- Generate `fileId` and set fileName
- Find path `directory` for upload blob
- Upload `fileStream` to blob storage follow `directory` and `fileId`
- Insert ImportHistoryLog
- Find trigger url by `type`
- Call api trigger url

+ Parameters
    + bu (string)
    
        The `bu` receive from request.
    
    + type (string)

        This `type` is a type of template. ex: `product-master`

+ Request (application/octet-stream)

    + Headers

        Authorization: Bearer {access-token}
        X-Custom-Extension: csv
        X-Custom-FileName: fileName.csv.gz
    
    + Body

        Binary Stream

+ Response 204

+ Response 400 (application/json)
    + Attributes (BadRequest Base)

+ Response 500 (application/json)
    + Attributes (InternalError Base)

### Upload file [/filemanagement/api/blobStorage/type/{type}]

#### Upload file [POST]
Use this endpoint to upload file into blob storage.

**Type Available:** [click](#header-type-in-blobstorage)

**Validation Criteria**
- [x] Check type available (Can be configuration)
- [x] Check content type, it is `application/octet-stream` only

**Process Instruction**
- Validate `fileStream`
- Generate `fileId` and set fileName
- Find path `directory` for upload blob
- Upload `fileStream` to blob storage follow `directory` and `fileId`
- Return download url for upload file 

+ Parameters
    + type (string)

        This `type` is a type of template. ex: `product-master`

+ Request (application/octet-stream)

    + Headers

        Authorization: Bearer {access-token}
        X-Custom-Extension: csv
        X-Custom-FileName: fileName.csv.gz
    
    + Body

        Binary Stream

+ Response 201 (application/json)
    + Attributes
        + fileUrl: http://localhost/api/blobStorage/fileid.dd4/decompress (string)

            A url for download this file.

+ Response 400 (application/json)
    + Attributes (BadRequest Base)

+ Response 500 (application/json)
    + Attributes (InternalError Base)

### Update info of import file [/filemanagement/api/importFileLog/updateImportFileLog]

#### Update info of file [PATCH]

**Validation Criteria**
- depend on code

**Process Instruction**
- Update data info of process file by fileId

+ Request (application/json)

    + Headers

        Authorization: Bearer {access-token}
    
    + Body

        {
            "fileId": "",
            "status": "",
            "remark": "",
            "sourceBatch": "",
            "allRecordCount": "",
            "failureRecordCount": "",
            "reportFileUrl": ""
        }

+ Response 200 (application/json)
    
    depend on code

+ Response 500 (application/json)
    + Attributes (InternalError Base)

# Data Structures

## BadRequest Base (object)
+ message: Invalid content type (string)

    A message validate.

## NotFound Base (object)
+ message: File not found (string)

    A data is missing in system.

## InternalError Base (object)
+ message: Null Referenece Exception (string)

    A exception message.