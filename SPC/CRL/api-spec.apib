FORMAT: 1A
HOST: http://crlservice

# CRL API

# Introduction
This is api spec for the process file.

## Group About

### Status in ImportHistoryLog
| **Status** | **Description**
|------------|-----------------
| New | Initial status of log.
| In-progress | This task is processing for import data.
| Completed | This task import data is completed.
| Incompleted | This task import data has a problem.
| Failed | Internal Exception for process import data.

### Function Process File

**Validation Criteria**
- [x] Check type of data, like:
    + [x] Check type and data is correct of datetime
    + [x] Check type digit for some field, if it is number.
    + [ ] [Optional] Check specific format of data, if it is specified, like: `email`
- [x] Check max length of data string, it isn't over length of field in database
- [x] Check duplicate data from system.

**Process Instruction**
- Find `HistoryLog` from `fileId`
- Check `HistoryLog.status`, it must to have [New, Incompleted]
- Get `file` from `HistoryLog.fileUrl`
- Validate data from `file`
- Save these data are correct from `file` into database
- [Optional] if some data are incorrect
    + Generate `report.csv` from the data are incorrect.
    + Compression file `report.csv` to `gzip`
    + Send report `gzip` upload to `FileManagement Service`
- Update info to `HistoryLog`
## Group Domain Api
This section groups CRL domain service

### Note

- the **domain** is the domain name, like: `Product`, `Master`
- the **subDomain** is the subDomain name, like: `ProductCMG`, `ProductCDS`

### Import [/domain/fileSubDomain/import]

#### Import file data [POST]
Use this endpoint to import file, by type of file is `.csv` only.

**Validation Criteria**
- [x] Check body `from data` must to have key ***file*** and not empty.
- [x] Check extension file must to have `.csv` only.
- [x] Check limit size of file isn't more than `10MB`

**Process Instruction**
- Validate `file` from request
- Generate `fileId`
- Set name `file` by `fileId`
- Upload `file` to `Filemanagement Service`
- Create `HistoryLog` param status = `"New"` fileId = `fileId`
- Create Background Task for run function `ProcessFile` by pass parameter `fileId`

+ Request (multipart/form-data; boundary=---BOUNDARY)

    + Headers

        Authorization: Bearer {access-token}
    
    + Body

        -----BOUNDARY
        Content-Disposition: form-data; name="file"; fileName="sourceData.csv"
        -----BOUNDARY
+ Response 204

+ Response 400 (application/json)
    + Attributes (BadRequest Base)

+ Response 500 (application/json)
    + Attributes (InternalError Base)


### Re-process [/domain/fileSubDomain/process/{fileId}]

+ Parameters
    + fileId (string)
    
        This field is identity of file.

#### Re-run process file [POST]
Re-run process file by `fileId`

**Process Instruction**
- Call function `ProcessFile` by pass parameter `fileId` from request

+ Request

    + Headers

        Authorization: Bearer {access-token}

+ Response 204

+ Response 404 (application/json)
    + Attributes (NotFound Base)

+ Response 500 (application/json)
    + Attributes (InternalError Base)

## Group FileManagement Api
This section group filemanagement service

### Upload Stream [/filemanagement/uploadStream/directory/{directory}/fileId/{fileId}]

#### Upload stream to blob [POST]
Use this endpoint to upload file into blob storage.

**Validation Criteria**
- [x] Check container available (Can be configuration)
- [x] Check content type, it is `application/octet-stream` only

**Process Instruction**
- Validate `fileStream`
- Upload `fileStream` to blob storage follow Uri parameters `directory` and `fileId`

+ Parameters
    + directory (string)
    
        This `directory` is a directory of blob.
    
    + fileId (string)

        This `field` is a identity of file. ex: `fileId.csv.gz`

+ Request (application/octet-stream)

    + Headers

        Authorization: Bearer {access-token}
    
    + Body

        Binary Stream

+ Response 201 (application/json)
    + Attributes
        + fileUrl: http://localhost/file (string)

            A url for download this file.

+ Response 400 (application/json)
    + Attributes (BadRequest Base)

+ Response 500 (application/json)
    + Attributes (InternalError Base)

### Download [/filemanagement/uploadStream/directory/{directory}/fileId/{fileId}?fileName={fileName}]

#### Download file from blob [GET]
Use this endpoint for download file from blob storage.

**Process Instruction**
- Download `file` from blob storage follow Uri parameters `directory` and `fileId`

+ Parameters
    + directory (string)
    
        This `directory` is a directory of blob.
    
    + fileId (string)

        This `field` is a identity of file. ex: `fileId.csv.gz`
    
    + fileName (optional, string)

        This `fileName` is a name of file. ex: `fileName.csv.gz`

+ Response 200 (application/octet-stream)

    + Headers

        Content-Disposition: attachment; filename="file.csv.gz"

    + Body

        Binary Stream

+ Response 404 (application/json)
    + Attributes (NotFound Base)

+ Response 500 (application/json)
    + Attributes (InternalError Base)

# Data Structures

## BadRequest Base (object)
+ message: Invalid content type (string)

    A message validate.

## NotFound Base (object)
+ message: File not found (string)

    A data is missing in system.

## InternalError Base (object)
+ message: Null Referenece Exception (string)

    A exception message.